from pydantic import BaseModel

LOAD_CHECKPOINT = "load_checkpoint"
SAVE_CHECKPOINT = "save_checkpoint"
STOP_TRAINING = "stop_training"
SET_LR = "set_lr"
RESET_LAYER = "reset_layer"
DO_EVALUATE = "do_evaluate"
WRAPPER_RESUME_FOR_LOAD_CHECKPOINT = "wrapper_resume_load_checkpoint"
TRAIN_INFO_UPDATE = "train_info_update"
CHECKPOINT_INFO_UPDATE = "checkpoint_info_update"


UPDATE_COMMANDS = {SET_LR, SAVE_CHECKPOINT, RESET_LAYER, DO_EVALUATE}
LOAD_COMMANDS = {LOAD_CHECKPOINT}
CONTROL_COMMANDS = {STOP_TRAINING}
WRAPPER_CONTROL_COMMANDS = {WRAPPER_RESUME_FOR_LOAD_CHECKPOINT}


UPDATE_COMMAND_TYPE = "update"
CONTROL_COMMAND_TYPE = "control"
WRAPER_CONTROL_COMMAND_TYPE = "wrapper_control"
LOAD_COMMAND_TYPE = "load"
SUCCESS = "success"


COMMAND_TO_TYPE = {
    SET_LR: UPDATE_COMMAND_TYPE,
    SAVE_CHECKPOINT: UPDATE_COMMAND_TYPE,
    RESET_LAYER: UPDATE_COMMAND_TYPE,
    DO_EVALUATE: UPDATE_COMMAND_TYPE,
    LOAD_CHECKPOINT: LOAD_COMMAND_TYPE,
    STOP_TRAINING: CONTROL_COMMAND_TYPE,
    WRAPPER_RESUME_FOR_LOAD_CHECKPOINT: WRAPER_CONTROL_COMMAND_TYPE,
}


EVENT_MESSAGE_TEMPLATE = {
    "status": SUCCESS,
    "command": "",
    "args": "",
    "metadata": "",
}


class Cmd(BaseModel):
    command: str
    args: str = None
